import random
import string
import math


class PasswordStrength:
    Weak = 0
    Average = 1
    Strong = 2


class StrengthTest:
    def __init__(self):
        self.words_file1 = "TEXT.txt"
        self.words_file2 = "words.txt"

    def is_lower_case(self, ch):
        return ch.islower()

    def is_upper_case(self, ch):
        return ch.isupper()

    def is_digit(self, ch):
        return ch.isdigit()

    def is_special_symbol(self, ch):
        return ch in "!@#$%&*"

    def estimate_time_to_crack(self, password, strength):
        attempts_per_second = 1000.0
        if strength == PasswordStrength.Weak:
            total_attempts = pow(10, len(password))
        elif strength == PasswordStrength.Average:
            total_attempts = pow(62, len(password))
        else:
            total_attempts = pow(72, len(password))
        crack_time = total_attempts / attempts_per_second
        print(f"Estimated time to crack the password: {round(crack_time)} seconds.")

    def file_to_array(self, filename):
        try:
            with open(filename, "r") as file:
                return file.readlines()
        except FileNotFoundError:
            print(f"Error: File '{filename}' not found.")
            return []

    def is_word(self, password):
        words_array1 = self.file_to_array(self.words_file1)
        words_array2 = self.file_to_array(self.words_file2)
        word_count = 0
        for word in words_array1 + words_array2:
            if word.strip().lower() in password.lower():
                word_count += 1
        return word_count

    def is_strong_password(self, password):
        repeated_characters = False
        lowercase_count = 0
        uppercase_count = 0
        digit_count = 0
        special_symbol_count = 0
        word_count = self.is_word(password)

        for ch in password:
            if self.is_lower_case(ch):
                lowercase_count += 1
            elif self.is_upper_case(ch):
                uppercase_count += 1
            elif self.is_digit(ch):
                digit_count += 1
            elif self.is_special_symbol(ch):
                special_symbol_count += 1

            repeated = password.count(ch)
            if repeated >= 2:
                repeated_characters = True

        if (word_count >= 10 or repeated_characters) and (
                (lowercase_count > 6 or uppercase_count > 6) and (digit_count > 6 or special_symbol_count > 6)):
            return PasswordStrength.Weak
        elif (word_count >= 10 or repeated_characters) and lowercase_count > 0 and uppercase_count == 0 and digit_count == 0 and special_symbol_count == 0:
            return PasswordStrength.Weak
        # Similarly, implement other conditions for average passwords
        else:
            return PasswordStrength.Strong

    def problem_finder(self):
        password = input("Enter Password: ")
        repeated_characters = False
        lowercase_count = 0
        uppercase_count = 0
        digit_count = 0
        special_symbol_count = 0
        word_count = self.is_word(password)

        for ch in password:
            if self.is_lower_case(ch):
                lowercase_count += 1
            elif self.is_upper_case(ch):
                uppercase_count += 1
            elif self.is_digit(ch):
                digit_count += 1
            elif self.is_special_symbol(ch):
                special_symbol_count += 1

            repeated = password.count(ch)
            if repeated >= 2:
                repeated_characters = True

        strength = self.is_strong_password(password)
        print("PASSWORD STRENGTH:", end=' ')
        if strength == PasswordStrength.Weak:
            print("Weak password")
        elif strength == PasswordStrength.Average:
            print("Average password")
        else:
            print("Strong password")

        self.estimate_time_to_crack(password, strength)

        # Additional checks for password weaknesses
        num = 0
        if lowercase_count > 0 and uppercase_count == 0 and digit_count == 0 and special_symbol_count == 0:
            num += 1
            print(f"{num}) Password contains only lowercase characters.")
            # Add other checks similarly

    def choosing_option(self):
        while True:
            print("\nOPTIONS")
            print("1) Testing a password for its strength")
            print("2) Generating a random password")
            print("3) End the program")
            option = input("Enter your choice (A/B/X): ").lower()
            if option == 'a':
                self.problem_finder()
            elif option == 'b':
                generator = Generate()
                print("Generated password:", generator.generate_password())
            elif option == 'x':
                print("Thank you for using the program.")
                break
            else:
                print("Invalid input. Please choose again.")


class Generate:
    def generate_password(self):
        length = int(input("Enter desired length of password (minimum length must be 8): "))
        if length < 8:
            print("Password length must be at least 8 characters.")
            return self.generate_password()

        password = ""
        for _ in range(length):
            password += random.choice(string.ascii_letters + string.digits + string.punctuation)
        return password


def main():
    strength_test = StrengthTest()
    strength_test.choosing_option()


if __name__ == "__main__":
    main()
